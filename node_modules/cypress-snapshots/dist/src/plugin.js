"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCypressSnapshotsPlugin = void 0;
var fs = require("fs");
var PNG = require('pngjs').PNG;
var pixelmatch = require("pixelmatch");
var currentRun;
var currentSpec;
function addCypressSnapshotsPlugin(on, conf) {
    on('before:run', function (data) {
        currentRun = data;
    });
    on('before:spec', function (spec) {
        currentSpec = spec;
    });
    on('after:screenshot', function (_a) {
        var path = _a.path;
        // Override previous screenshot, so on test refresh the newest is accessed.
        if (path.includes('__snapshot__')) {
            fs.renameSync(path, path.replace(/ \(\d*\)/i, ''));
        }
    });
    on('task', {
        runSnapshotComparison: function (args) {
            return runSnapshotComparison(args);
        },
    });
    on('after:spec', function (spec) {
        currentSpec = undefined;
    });
    on('after:run', function (data) {
        currentRun = undefined;
    });
}
exports.addCypressSnapshotsPlugin = addCypressSnapshotsPlugin;
function runSnapshotComparison(args) {
    var _a;
    // Define path variables.
    var config = {
        specName: currentSpec === null || currentSpec === void 0 ? void 0 : currentSpec.name,
        specPath: currentSpec === null || currentSpec === void 0 ? void 0 : currentSpec.relative,
        specType: currentSpec === null || currentSpec === void 0 ? void 0 : currentSpec.specType,
        snapshotName: args.name,
        snapshotPath: (currentSpec === null || currentSpec === void 0 ? void 0 : currentSpec.relative) + "-snapshots/" + args.name + "/",
        snapshotsPath: (currentSpec === null || currentSpec === void 0 ? void 0 : currentSpec.relative) + "-snapshots/",
        screenshotsPath: (currentSpec === null || currentSpec === void 0 ? void 0 : currentSpec.relative.replace('/integration/', '/screenshots/')) + "/",
        updateSnapshots: process.env['npm_config_updatesnapshots'] || false,
        ignoreSnapshotError: process.env['npm_config_ignoresnapshoterror'] === 'true' ? true : false,
        snapshotsSuffix: process.env['npm_config_snapshotssuffix']
            ? "." + process.env['npm_config_snapshotssuffix']
            : ".unknown",
        browser: (_a = currentRun === null || currentRun === void 0 ? void 0 : currentRun.browser) === null || _a === void 0 ? void 0 : _a.name,
    };
    // Make sure all necessary directories are created.
    if (!fs.existsSync(config.snapshotPath)) {
        fs.mkdirSync(config.snapshotPath, { recursive: true });
    }
    // Get currently screenshoted image.
    var actualImage = PNG.sync.read(fs.readFileSync(config.screenshotsPath + "__snapshot__" + config.snapshotName + ".png"));
    // Save currently screenshoted image to snapshots folder as actual.
    fs.writeFileSync(config.snapshotPath + "actual" + config.snapshotsSuffix + "." + config.browser + ".snap.png", PNG.sync.write(actualImage));
    var width = actualImage.width, height = actualImage.height;
    // Get previously saved and expected image.
    var expectedImage;
    try {
        expectedImage = PNG.sync.read(fs.readFileSync(config.snapshotPath + "expected" + config.snapshotsSuffix + "." + config.browser + ".snap.png"));
    }
    catch (_b) { }
    // Create diff image.
    var diff = new PNG({ width: width, height: height });
    var pixelDiffCount;
    try {
        pixelDiffCount = pixelmatch(expectedImage.data, actualImage.data, diff.data, width, height, args.pixelmatch);
    }
    catch (ex) {
        // If images are not the same size pixelmatch will throw an error.
        pixelDiffCount = width * height;
    }
    // Save diff image to snapshots folder as diff.
    fs.writeFileSync(config.snapshotPath + "diff" + config.snapshotsSuffix + "." + config.browser + ".snap.png", PNG.sync.write(diff));
    // If any pixel has changed and update snapshots is configured, override expected image with actual.
    if (config.updateSnapshots && pixelDiffCount) {
        fs.writeFileSync(config.snapshotPath + "expected" + config.snapshotsSuffix + "." + config.browser + ".snap.png", PNG.sync.write(actualImage));
        return throwError("The \"" + config.snapshotName + "\" snapshot has been updated and should be re-tested. See " + config.snapshotPath, config.ignoreSnapshotError);
    }
    // Fail if no update is configured and expected image is missing.
    else if (!expectedImage) {
        return throwError("An expected \"" + config.snapshotName + "\" snapshot has not been yet defined. See " + config.snapshotPath, config.ignoreSnapshotError);
    }
    // Fail if any pixel has changed and update has not been configured.
    else if (pixelDiffCount && !config.updateSnapshots) {
        return throwError("The \"" + config.snapshotName + "\" snapshot has changed. " + pixelDiffCount + " pixels does not match. See " + config.snapshotPath, config.ignoreSnapshotError);
    }
    // Happy-case.
    else {
        return null;
    }
}
function throwError(msg, ignoreError) {
    if (ignoreError) {
        console.log("[SNAP] " + msg);
        return null;
    }
    else {
        throw new Error(msg);
    }
}
